在这道题我自己的解法中： 主要思想是，先不管在如IV的5-1这样的减法，先把这种全看作加法即1+5,在加法做完之后再来考虑减法的问题
减法：需要去确定如IV这样 出现的次数和是哪一个出现了 再再结果的基础上直接减去它们的  2倍
但是    在本道题中 本来想在一次for循环中 用3次switch 去判断 但是没有成功 。原因是：只运行了第一个switch 之后的两个被跳过了
然后    又想用s[i]+s[i+1] =? 'IV' 来实现一次switch 但是发现 s[i]+s[i+1]被变为数字了 使用char string 各种强转也没用
最终    采用了最笨的方法 用了三个if语句 直接判断s[i]和s[i+1]

在本次代码中 我学会了：
1、switch case 的应用：里面continue与break与不加的区别
2、知道了string s  对于字符串s 可以直接用s[0],s[1]等去访问它的每一个字符
3、函数   s.substr(pos, n)
    解释：返回一个string，包含s中从pos开始的n个字符的拷贝（pos的默认值是0，n的默认值是s.size() - pos，
    即不加参数会默认拷贝整个s）
4、三目运算符
    x < 0 ? y = 10 : z = 20;
    等价 if (x < 0)
            y = 10；
         else
            z = 20;
   高级应用：unordered_map<string, int> m = {{"I", 1}, {"IV", 3}, {"IX", 8}, {"V", 5}, {"X", 10}, {"XL", 30}, {"XC", 80}, {"L", 50}, {"C", 100}, {"CD", 300}, {"CM", 800}, {"D", 500}, {"M", 1000}};
            string two = s.substr(i-1, 2);//两个两个的遍历
            string one = s.substr(i, 1);//一个一个的遍历
            r += m[two] ? m[two] : m[one];//解释：  如果m[two]找到了就为真 则 r=r+m[two]否则就没找到就加One
      


   
