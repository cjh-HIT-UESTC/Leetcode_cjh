class Solution {
public:
    
    /*
    int searchright(vector<int>& nums, int target) {
        ////现在需要的是仅找右边界
        int left=0;
        int right=nums.size()-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]<target) left+=1;
            else if(nums[mid]>target)    right-=1;
            else{
                left+=1;
            }
        }
        return left;
        }
    */
    int search(vector<int>& nums, int target) {
        //输入为一个数组 Int 返回Int 不管怎样 必须先找到target的一个位置 因为是查找问题 所以理所当然想到最快的二分法
        /*       
        int left=0;
        int right=nums.size()-1;
        int mid=0;
        int label=0;
        int sum=0;

        if(nums.size()==1&&nums[0]==target)
        {
            return 1;    //特殊情况
        }

        while(left<=right)//这里之所以是等于 是因为左右边界还需要用到
        {
            mid=left+(right-left)/2;
            if(nums[mid]<target)
            {
                left=left+1;
            }
            else if(nums[mid]>target)
            {
                right=right-1;
            }
            else
            {
                label=1;
                break;
            }
        }
        if(label==0)
        {
            return 0;
        }
        else
        {
            int mid1=mid;
            while(mid1<nums.size()&& nums[mid1]==target )
            {
                mid1++;
                sum++;
            }
            while( mid>=0&&nums[mid]==target )
            {
                mid--;
                sum++;
            }
        }
        return sum-1;
        */
        //以上是我自己想到的二分法 主要就是先找到一个目标值位置 然后再向左右两边遍历找到左右边界
        //现在改进二分法 不用二分法找一个目标值位置 而是去找上界和下界 (主要差别在于找到目标值后 需要在这个基础上找左右界)

        ////return searchright(nums,target)-searchright(nums,target-1);//两个数的右边界向减

        //下面利用哈希表
        unordered_map<int,int>map;
        for(int num:nums)
        {
            ++map[num];
        }
        return map[target];

    }
};
