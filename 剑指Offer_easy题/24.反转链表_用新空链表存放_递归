/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        //输入链表 输出链表 开始是头指向尾 现在是尾指向头
        //考虑用双指针 一个不断的遍历链表 一个不断的换位
        
        /*
        //先考虑链表里只有两个数的情况：
        ListNode* p1= NULL;
       
        while(head)
        {
            ListNode* p2=head->next;
            head->next=p1;
            p1=head;
            head=p2;

        }
        return p1;
        */
        //以上用一个空指针存放了每次循环存放的链表 下面使用递归
        if(!head ||!head->next)
        {
            return head;
        }
        ListNode* p = reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return p;

    }
};
