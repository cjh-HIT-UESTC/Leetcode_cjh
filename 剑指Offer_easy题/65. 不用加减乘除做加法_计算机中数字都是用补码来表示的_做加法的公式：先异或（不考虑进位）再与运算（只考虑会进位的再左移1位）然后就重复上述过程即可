class Solution {
public:
    int add(int a, int b) {
        //对于两个二进制数 不考虑每一位上的进位相当于： 对两个数做异或（相异为1）
        //                再考虑进位：做与运算（全1为1（表示要进位））    然后左移一位（右边加0）  
        //                就等效为下一个加法了   直到做与运算时等于0（无进位）
        //     对于负数：最高位为1 所以想要转成对应的正数：取反加1
        //   二进制运算：正数加负数： 负数取反加1（补码）+正数的原码  若最高位为1允许溢出  若最高位为1则-1取反

//在计算机中***** 负数正数都是用补码来表示的***********  当计算机发现最高位为1的时候 输出的时候会把它-1取反

        //用与运算作为判断停止条件
        int c=a;//存放异或的结果
        while(b!=0)
        {
            //先异或  并记录结果
            c=a^b;
            //再与运算 并左移1位赋值给b
            b=(unsigned int)(a&b)<<1;
            //更新a的值
            a=c;
        }
        return c;
    }
};
