首先 要明白二叉树的结构 它必然是由左右节点构成的 所以当没有左节点时 它的样子是这样的：【2，null,1】
所以当时使用递归时，只要到最后节点了（后续没有子节点了），就返回当前节点

然后定义左右节点 进行交换 最后返回这里的头指针  这样不断递归即可

所以通过本题 首先了解了二叉树的结构 并知道了它是链表的存储结构
            然后知道了递归  即是先考虑最后的情况 然后递归返回 然后再写下对最后位置需要的操作
            这样就能够递归了
            
            
      关于本题的栈   就是利用栈的特性 每次把两个节点拿进去 然后不断的更新位置  每次只出一个  因为为空的话 换了也没影响
      核心思想就是先换左边 再换右边 并且保存上下关系不变
