class Solution {
public:
    char firstUniqChar(string s) {
        //输入为字符串 输出为char 因为要知道是否只出现一次 所以必然会遍历完
/*
        for(auto &c1:s)
        {
            int i=1;
            for(auto &c2:s)
            {
                if(c1==c2)
                {
                    i++;
                    if(i==3)
                    {
                        break;
                    }
                }
                
            }
            if(i==2)
            {
                return c1;
            }
        }
        return ' ';
        */
        //以上使用的是 遍历2次字符串每个字符 进行判断  比较慢
        //下面使用 哈希表 并使用字母的ASCLL码 来作为哈希表里的下标
        /*
        unordered_map<int,int> map;
        for(char ch:s)
        {
            ++map[ch];//出现一次就加1
        }

        //再遍历一遍哈希表 等于1就输出 否则最后输出‘‘
        for(int i=0;i<s.size();++i)
        {
            if(map[s[i]]==1) return s[i];
        }
        return ' ';
        */
        //以上是用哈希表 存放数据出现的次数 还能用哈希表存放数据的索引：直接从答案复制过来了
        unordered_map<char, int> position;//注意是定义的 char int 即键是字符 然后对应它出现的索引
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            if (position.count(s[i])) {  //count 函数 用来看哈希表里是否已经有了该字符
                position[s[i]] = -1;   //如果一旦已经存在了 就让索引为-1
            }
            else {
                position[s[i]] = i;  //不存在就存放它的索引
            }
        }
        int first = n;
        for (auto [_, pos]: position) {////注意这里的遍历方式
            if (pos != -1 && pos < first) {  //遍历哈希表 输出符合条件的字符的最前面的索引
                first = pos;
            }
        }
        return first == n ? ' ' : s[first];   //如果没有就输出‘‘


    }
};
