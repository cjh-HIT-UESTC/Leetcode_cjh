class Solution {
public:
    int minArray(vector<int>& numbers) {
        //输入为数组 输出为int  且输入的是 一个递增数组的旋转数组 
        //为了找到最小数字 最简单的肯定是遍历 但明显太傻 因当充分利用递增序列和旋转的信息
        //分析这种结构：第一个数字 如果小于等于 后面的数字 说明为正序排列  如果大于等于 则说明那个位置为剩余部分

        //根据上述分析，如果我们假设：这个原始序列是严格递增（没有重复的数字），那么直接使用二分法，依次和第一个数作比较
        //如果大于第一个数，说明最小数在右边，如果小于则说明最小数在左边，这样不断二分

        //现在要考虑的是：非严格递增（可能有重复的）,这样想了一会感觉有点麻烦，比如：23122222222和22222222222221，用二分法，不能确定指针怎么走

        //先写第一种：挨个和第一个数比，如果有小于它的就输出第一个小于它的数，没有就输出它自己
        /*
        for(int i=0;i<numbers.size();++i)
        {
            if(numbers[i]<numbers[0])
            {
                return numbers[i];
            }
        }
        return numbers[0];
        */
        //以上算法能够实现，但是明显效率太低
        //还是需要考虑二分法
        //用上述我说的方法很不好处理一些特殊情况，所以重新考虑二分法的实现： 因为总是要和第一个数比较，一旦找到比它小的且最小的即可
        //为此我想到了：多加一个比较位a[0]：最后一位a[n],a[n]<=a[0]
        int high=numbers.size()-1;
        int low=0;
        
        while(low<high)
        {
            int mid=low+(high-low)/2;
            if(numbers[mid]>numbers[high])
            {
                low=mid+1;
            }
            else if(numbers[mid]<numbers[high])
            {
                high=mid;
            }
            else
            {
                high--;
            }
           // mid=low+(high-low)/2;
        }
        return numbers[low];




        

    }
};
