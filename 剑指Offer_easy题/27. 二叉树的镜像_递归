/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mirrorTree(TreeNode* root) {
        ////输入为二叉树 输出为二叉树 二叉树：因为明说为二叉树，所以必然是1一个节点到2个节点这样不断地下去  且数据是从上到下 从左到右

        //所以本题的二叉树镜像应该是有一定规律的 且是有左右节点指针的 比如头指针的left就指向2

        //因为每个节点的左右都要换位置 然后再返回上一层 所以必然是递归 且带着分治的思想
/*   
       if(!root)
       {
           return {};
       }

        TreeNode* head=root;//头指针
        TreeNode* leftroot;//左指针
        TreeNode* rightroot;//右指针

        if(!root->left)
        {
            return head;
        }

        leftroot = mirrorTree(root->left);
        rightroot = mirrorTree(root->right);

        root->left=rightroot;
        root->right=leftroot;

        return head;
*/
        //以上代码实现的是完全二叉树的镜像     但是本题的二叉树可以是不完全的镜像  如[1,null,2]      所以重新思考一下
         
        if(!root)
        {
           return nullptr;
        }

        TreeNode* head=root;//头指针
        TreeNode* leftroot;//指针
        TreeNode* rightroot;//指针

        //if(!root->left)
       // {
       //     return head;
        //}                     //所以其实只要删掉这里就行  因为 我们现在就只考虑递归到最后的一个节点 而不去考虑双节点 

        leftroot = mirrorTree(root->left);
        rightroot = mirrorTree(root->right);

        root->left=rightroot;
        root->right=leftroot;

        return head;
    }
};
