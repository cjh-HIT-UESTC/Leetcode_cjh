class Solution {
public:
    int cuttingRope(int n) {
        //通过纸面分析可知 必须把任何数字分成仅由 2,3,4三个数字相加组成的集合(其实就是2和3)  之所以不分1 是因为1对乘积没贡献 还会让原始数减少1
        //并且要能3就3

        //所以先按减法记录分了多少个3 然后还要加上判断减3之后不能只剩下1（必须保证仅有2和3）  可以减去之后什么都没有(全为3)
        
        /*
        int num3=0;//记录3的个数
        //int num2=0;//记录2的个数

        if(n==2) return 1;
        if(n==3)    return  2;

        while( n>=3&&n!=4 )
        {
            num3++;
            n-=3;
            
        }
        if(n==4)
        {
            return pow(3,num3)*4;
        }
        if(n==2)
        {
            return pow(3,num3)*2;
        }
        return pow(3,num3);
        */
        //以上代码能实现 但是是以一种很直观的数学模式做的   下面改进一下

        //return n <= 3? n - 1 : pow(3, n / 3) * 4 / (4 - n % 3);//这就是数学公式 直接写出  也就是上面算法的核心

//下面用贪心算法
        //只要还有3就继续分解为3 一旦剩下1 就除以3乘4  
        int num=1;
        if(n<=3)    return n-1;
        while(n>=3)
        {
            n-=3;
            num *=3;
            if(n==1)    return num*4/3;            //有3分3   无3再讨论
            if(n==0)    return num;
        }
        return num*2;

    }
};
