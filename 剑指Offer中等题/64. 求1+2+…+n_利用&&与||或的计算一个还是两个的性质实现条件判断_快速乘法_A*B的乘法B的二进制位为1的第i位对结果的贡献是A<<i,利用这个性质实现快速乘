class Solution {
public:
    int sumNums(int n) {
        // 先假设没有限制能怎么做：
        /*
        int num=0;
        for(int i=1;i<n+1;++i)
        {
            num+=i;
        }
        */
        //这是第一种想法： 每一个加起来 但是有循环 于是考虑怎么去掉循环：用递归
        /*
        if(n==1)    return 1; // or if(n==0) return 0;  return n == 0 ? 0 : n + sumNums(n - 1);
        return n+sumNums(n-1);
        */
        //因为有if 所以考虑去掉条件判断 于是可以利用n本身(当true和false)
        
        //一个技巧：  对于&&（与）要两个都正确才正确,第一个错就全错，不执行后面的了   对于||（或）前面正确就正确不用执行后面，全错才为错
        //所以可以利用这个技巧 把n本身当作递归停止条件 直到n=0时 就停止
        //利用|| 当前面为正确就只执行前面
      /*  
        n&&(n+=sumNums(n-1));
        return n;
*/

        //利用快速乘法
        /*
        int quickMulti(int A, int B) {
    int ans = 0;
    for ( ; B; B >>= 1) {
        if (B & 1) {
            ans += A;
        }
        A <<= 1;
    }
    return ans;
        */
        int ans=0;
        int a=n+1;
        int b=n;
        //a*b  b的二进制上有1的位为第i位 则对A的贡献是 a<<i
        for(;b;b>>=1)
        {
            if(b&1)
            {
                ans+=a;
            }
            a<<=1;
        }
        return ans/2;

    }
};
