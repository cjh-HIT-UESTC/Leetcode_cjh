首先本题最笨的方法就是 用n当作计数器 来不断的乘或除 这样理所当然的会超时
  
  然后考虑到幂次尽管很大，但如果采用二分的方式 就最多只要32次运算，所以二分法很适合加速
      因为要迭代，所以先分析函数的作用：输入当前数字和幂次输出结果
      所以对于任意数字的任意幂次，其幂次可以分解为奇数和偶数
      
      对于偶数：比如2的10次方，可以分解为2的5次方 乘 2的5次方 
      对于奇数：2的5次方 就能分解为 2 乘 2的2次方 乘 2的2次方 
      所以可以发现，在递归中 每次都输入的幂次都是 n/2  但是在使用前 要判断n为奇数还是偶数 奇数需要多乘一个自身
      
      并且对于函数 可以首先知道 n=0时 必返回1  
   对于我的写法：我在函数中调用了两次我的函数 所以需要考虑n=2和-2的情况 因为最外层的都是幂次为2 所以必须要考虑这两种
   
  
以下讨论有点不清楚  这种写法有点巧妙 主要可以学习自己写的第二种
  
  应该是位幂次运算
   对于第三种  因为幂次为1时 会继续进去 直到幂次为0 返回1 这时它会由于奇数要多乘自己 所以会返回x 所以不用考虑n=1的情况   仅需要考虑你
   
   对于这种写法 n&1 :是位运算 用来考虑了奇数偶数 
  
   n>>1是用来除以2的（向右移位） ！！！！！    注意：：：！！！！！！！！对于负数，右移并不是除以2  而是补码移位 
   对于负数 前面会多个1 所以-3右移后 变为了3！！！！   
 
  总而言之：在计算机中 是补码移动 正数添加0  负数添加1 
