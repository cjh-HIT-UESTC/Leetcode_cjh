class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //第一种 暴力解法 
        /*
        int j=0;
        int i=0;
        for( i=0;i<nums.size();i++)
        {
            for( j=i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j]==target)
                    return {i,j};
            }
        }
        return {i,j};

        */
        //第二种方法 目标值减去一个数再查表
        /*
        int found=0;
        int i,j;
        for(i =0 ; i < nums.size();i++)
        {
            int num2=target-nums[i];
             for( j=i+1;j<nums.size();j++)
             {
                 if(nums[j]==num2)
                 return{i,j};
             }
        }

        return {i,j};  
    };
    */


        //第三种方法 目标值减去一个数再查表 利用哈希表提高速度
        /*
        map<int,int>hash;//创建哈希表
        //定义存放结果的一个数组
        vector<int>ans(2,-1);//表示初始化 2个整数设置为-1
        //把数组放进哈希表里
        for(int i=0;i<nums.size();i++)
        {
            hash.insert(map<int,int>::value_type(nums[i],i));
        }
        //开始在哈希表里查找
        for(int i=0;i<nums.size();i++)
        {  
            if(hash.count(target-nums[i])>0 && (hash[target-nums[i]]!=i))
            {
                ans[0]=i;
            ans[1]=hash[target-nums[i]];
            break;
            }
        }
        return ans;
        */

        //第四种方法 一遍哈希表 在放哈希表的过程一边放一边比较有无目标值
        map<int,int>a;
        vector<int>b(2,-1);
        for(int i=0;i<nums.size();i++)
        {

            if(a.count(target-nums[i])>0)
            {
                b[1]=i;
                b[0]=a[target-nums[i]];//注意顺序
                break;
            }
            a.insert(map<int,int>::value_type(nums[i],i));
        }

        return b;

    };
};
