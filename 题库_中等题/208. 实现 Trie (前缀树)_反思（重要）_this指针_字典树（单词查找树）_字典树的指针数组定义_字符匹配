首先要知道什么是字典树：
      是一颗树  这个树由根节点（一个字符）出发  不断的扩展（a,ap,app,apple）  如果在当前树下，到后面的字符没有了，就需要开辟新的指针空间来存放
    
    ***************************核心******************************************核心******************************************核心***************
    字典树的数据包含：一个bool类型的值isend，用来判断当前的位置是否是一个单词的结尾
                    一个指向它自身的指针数组  注意 是指针数组  对于单词，有26个字母 所以是26大小的指针数组： Trie* next[26]
 ***************************核心*******************************核心******************************************核心******************************************核心***************
                    
                    
       首先定义一个新的字典树节点：  因为是空的 所以isend=false  
                                这个节点有着26个指针 构成了数组，要把它们全初始化：memset(next,0,sizeof(next))   把这26个指针全部初始化为0  更好的写法是初始化为空指针：
                                       memset(next,NULL,sizeof(next));
                         用到了函数：memset
              
              
              
        插入新单词操作：***************************核心******************************************核心******************************************核心***************
                      这里用到了指针：this     Trie* node=this    ***************这个this表示的是指向当前的对象***************  
                    所以对于第一次this:表示指向的是一个空对象
                    之后的this：表示指向的 那个已经存在了的树 的 根节点
                    如果下一个字符不存在 就开辟一个新的节点空间 存放新的字符 直到全部存进去 并把最后标识为设定为true
            ***************************核心******************************************核心******************************************核心***************
            
            
         查找单词操作：
            用THIS指向自己 
            然后遍历这个单词  有的话就不断的下去 直到节点指向空（找不到字符）   或者 全部能够查找到 然后 再判断是否是一个完整的单词  就用isend输出
            
         查找单词片段操作：
            在查找单词操作上  如果全部能找到 就直接true 而不用isend
         
                              
