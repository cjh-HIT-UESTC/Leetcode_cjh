class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //经典的二维动态规划   假设字符串长度分别为 m,n
        //建立一个m+1，n+1的二维数组，每一个位置即：dp[i][j]表示s1[0:i-1]的字符与s2[0:j-1]的最长公共子序列的长度
        //所以，每次只需要比较当前的字符：s1[i]与s2[j]是否相等，相等：dp[i][j]=dp[i-1][j-1]+1。否则就不加一
        //这样就得到了动态规划的递推式
        int m=text1.size();
        int n=text2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1));
        for(int i=1;i<=m;++i){
            for(int j=1;j<=n;++j){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else{
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        return dp[m][n];
    }
};
