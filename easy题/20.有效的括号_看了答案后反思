在看了答案后，发现自己思考东西还是没有往数据结构上思考
这道题 明显能够利用栈的概念 然后再查找，查找时利用哈希表加速   未来思考问题要多往数据结构上思考

利用栈：每遇到一个左括号，就放入栈中，这样一直走下去
        然后一旦遇到了一个右括号，因为右括号要先闭合（这里和我最开始思考的是一样的），所以将栈中的栈顶pop出来，就行比较
        在这里，进行比较时，可以利用哈希表加速查找
        不匹配就false，匹配，就pop了，就继续走，重复上述步骤
        因为必为偶数 所以不存在遇到了右括号而栈里没有数据的情况（只能外面有偶数个右括号如：  {}））          ）
        所以，一旦还有右括号，而栈里没有左括号，则false
        最后，如果遍历结束，并且栈里没有左括号了，说明全部匹配，则true，否则false
        
在题解里面，我学会了一些函数的使用：
 1、哈希表：哈希表是一种 键值对的存放方式的结构 里面可以存放任何数据类型，所以可以这样设置：
            unordered_map<char,char>pairs=
            {
              {')',')'},          注意逗号
              {']','['},
              {'}','{'}
            }
            存放了char类型两个，并初始化了
   unordered_map ：表示哈希表
2、stack<char> stk   定义一个栈
      stack 是c++里的标准模板类用于完成栈操作
      <char>代表这个栈能操作char类型数据

3、for(char ch:s)        ****************************这种写法很有用，提供了一种对字符串的遍历方法*******************************
    类似for(auto a:b)
    for(auto a:b)中b为一个容器，效果是利用a遍历并获得b容器中的每一个值，但是a无法影响到b容器中的元素。
    for(auto &a:b)中加了引用符号，可以对容器中的内容进行赋值，即可通过对a赋值来做到容器b的内容填充
  所以为 定义一个char类型的ch去遍历s（字符串）
4、count函数
  可以用来统计字符串中某个字符的个数       加深用法：用来判断这个字符在不在这个哈希表里
  pairs.count(ch) 这里的意思就是判断ch在不在这个哈希表李  这里要注意 因为哈希表是键值对，所以只找键 也就是只找有没有右括号
5、stk.top() 
  表示这个栈的栈顶 对象
  stk.pop();  直接只调用它，表示返回一个栈顶出栈后的 栈
6、 stk.push(ch)
  表示 入栈 把ch放进这个栈中

