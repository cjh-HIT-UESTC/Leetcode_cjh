对于本题 其实解决思路很简单 就是两个两个的比较，一旦找到不同的 再进行操作（如何操作是最重要的）
我一开始想到的是：类似冒泡排序，一旦找到不同的就把它放到后面去：当然最简单的放倒后面去，肯定是直接放到最后面最简单。但是有一个问题：
    因为是数组，放到最后面了。剩下的那些数字并不会自动往前移动，所以这里我才想到了利用冒泡排序进行两两交换，然后把它移动到最后面
    
    在这里有一个很聪明的算法：不建立第三个数，交换两个数的算法：
                        //a=a+b;
                    //b=a-b;
                    //a=a-b;
                    nums[j]  = nums[j]+nums[j+1];
                    nums[j+1]= nums[j]-nums[j+1];
                    nums[j]  = nums[j]-nums[j+1];
                  （加减交换法）
  这道题如果利用我的方法，还要注意循环条件的控制，不能超出了数组的长度（这里需要自己认真考虑）
  但是以上算法虽然是正确的，但是由于冒泡排序，太耗费时间了，所以超时了。于是重新考虑了
  
重新考虑的算法更加聪明：
    从头遍历到尾（不循环），每两个数进行比较，一旦两个数字不同，就把后面的那个数字，赋值到nums[j]（j一开始等于1），然后j++，
    这样就能只在一次遍历的条件下，通过赋值而不创建新的数组，实现前j位为排序好的无重复的数组
    在这里，可以看作是两个指针，一个指针用来描述遍历，一个指针用来描述需要构造的那个数组
