class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        //首先 本题输入的数组是无序的 并且大于等于00 
        //且本题可以输入为空（直接出空）
        //因为是原地删除，所以可以考虑把要删除的数放到数组后面即可（利用冒泡排序，但由2266题可以知道，这样效率低下）
        //所以我依旧考虑使用双指针
        //一个指针A遍历整个数组，一个指针B表示：一旦碰到等于val值的时候就停下来，然后一旦A指针指到了不等于val的值的时候，
        //就把val赋值给指针B处

/*
        //首先判空
        if(nums.empty()) return 0;

        int j=0;//指针j
        for(int i=0;i<nums.size();i++)
        {
            //第一个指针i，用来遍历
            if(nums[i] == val)
            {
                //i指针找到了，j指针保持不动
                //如果这里是最后一位
                if(i==nums.size()-1)
                {
                    return j+1;//因为j是从0开始算的
                }
                i++;
                //一旦找到相等的，指针j就继续移动，去找下一个不相等的,并且指针j保持不动
                for( i;i<nums.size();i++)
                {
                    if(nums[i] != val)
                    {
                        //找到了不相等的那个,赋值给指针j的位置
                        nums[j] = nums[i];
                        j++;
                        ////break;//跳出当前循环
                    }
                    else
                    {
                        //一旦又找了相同的
                        ////i--;
                        ////break;//跳出这个循环，进入上一层循环
                    }
                }
            }
            else
            {
                //如果不相等，另一个指针j也要向前动
                j++;
            }
        }
        return j+1;//因为j是从0开始算的
*/
//以上算法变得过于复杂，重新考虑
        //上述算法目标是实现最后数组的有序输出，但是本题并不要求，所以可以简化思考

        //首先判空
        //if(nums.empty()) return 0;

        //如果val>50，直接返回nums.size()
        if(val>50) return nums.size();

        int j=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] != val )//找到了相同值,仅指针i++
            {
                //这里不是相同值。所以可以赋值
                nums[j] = nums[i];
                j=j+1;
            }
        }
        return j;









    }
};
